generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model answer_keys {
  id         BigInt    @id @default(autoincrement())
  title      String
  year       Int?
  file_url   String
  created_at DateTime? @default(now()) @db.Timestamp(6)
}

model categories {
  id          BigInt    @id @default(autoincrement())
  name        String    @unique
  description String?
  created_at  DateTime? @default(now()) @db.Timestamp(6)
  posts       posts[]
}

model comments {
  id         BigInt    @id @default(autoincrement())
  post_id    BigInt?
  user_id    BigInt?
  content    String
  created_at DateTime? @default(now()) @db.Timestamp(6)
  posts      posts?    @relation(fields: [post_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  users      users?    @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model course_plans {
  id            BigInt        @id @default(autoincrement())
  course_id     BigInt?
  plan_type     plan_type
  plan_name     String
  price         Decimal?      @default(0) @db.Decimal(10, 2)
  duration_days Int?
  created_at    DateTime?     @default(now()) @db.Timestamp(6)
  courses       courses?      @relation(fields: [course_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  enrollments   enrollments[]
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model course_reviews {
  id         BigInt    @id @default(autoincrement())
  course_id  BigInt?
  user_id    BigInt?
  rating     Int?
  review     String?
  created_at DateTime? @default(now()) @db.Timestamp(6)
  courses    courses?  @relation(fields: [course_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  users      users?    @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model course_videos {
  id         BigInt    @id @default(autoincrement())
  course_id  BigInt?
  title      String
  video_url  String
  position   Int
  is_demo    Boolean?  @default(false)
  created_at DateTime? @default(now()) @db.Timestamp(6)
  courses    courses?  @relation(fields: [course_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model courses {
  id             BigInt           @id @default(autoincrement())
  title          String
  description    String?
  thumbnail_url  String?
  created_at     DateTime?        @default(now()) @db.Timestamp(6)
  updated_at     DateTime?        @default(now()) @db.Timestamp(6)
  course_plans   course_plans[]
  course_reviews course_reviews[]
  course_videos  course_videos[]
  enrollments    enrollments[]
  payments       payments[]
}

model enrollments {
  id           BigInt             @id @default(autoincrement())
  user_id      BigInt?
  course_id    BigInt?
  plan_id      BigInt?
  status       enrollment_status? @default(active)
  started_at   DateTime?          @default(now()) @db.Timestamp(6)
  expires_at   DateTime?          @db.Timestamp(6)
  courses      courses?           @relation(fields: [course_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  course_plans course_plans?      @relation(fields: [plan_id], references: [id], onUpdate: NoAction)
  users        users?             @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model google_ads {
  id         BigInt    @id @default(autoincrement())
  placement  String
  ad_code    String
  created_at DateTime? @default(now()) @db.Timestamp(6)
}

model mock_attempts {
  id           BigInt      @id @default(autoincrement())
  test_id      BigInt?
  user_id      BigInt?
  answers      Json
  score        Int?
  started_at   DateTime?   @default(now()) @db.Timestamp(6)
  completed_at DateTime?   @db.Timestamp(6)
  mock_tests   mock_tests? @relation(fields: [test_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  users        users?      @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model mock_categories {
  id          BigInt        @id @default(autoincrement())
  name        String        @unique
  description String?
  mock_series mock_series[]
}

model mock_tags {
  id              BigInt            @id @default(autoincrement())
  name            String            @unique
  mock_series_tags mock_series_tags[]
}

model mock_series_tags {
  series_id BigInt
  tag_id    BigInt
  series    mock_series @relation(fields: [series_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  tag       mock_tags   @relation(fields: [tag_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@id([series_id, tag_id])
}

model mock_questions {
  id             BigInt         @id @default(autoincrement())
  test_id        BigInt?
  question_text  String
  question_type  question_type? @default(mcq)
  options        Json?
  correct_answer String
  marks          Int?           @default(1)
  mock_tests     mock_tests?    @relation(fields: [test_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model mock_series {
  id              BigInt           @id @default(autoincrement())
  category_id     BigInt?
  title           String
  description     String?
  created_at      DateTime?        @default(now()) @db.Timestamp(6)
  price           Decimal?         @db.Decimal
  mock_categories mock_categories? @relation(fields: [category_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  mock_tests      mock_tests[]
  payments        payments[]
  mock_series_tags mock_series_tags[] // <-- ADD THIS LINE
}

model mock_tests {
  id               BigInt           @id @default(autoincrement())
  series_id        BigInt?
  title            String
  description      String?
  duration_minutes Int
  total_marks      Int
  created_at       DateTime?        @default(now()) @db.Timestamp(6)
  is_free          Boolean?
  mock_attempts    mock_attempts[]
  mock_questions   mock_questions[]
  mock_series      mock_series?     @relation(fields: [series_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model payments {
  id             BigInt          @id @default(autoincrement())
  user_id        BigInt?
  course_id      BigInt?
  amount         Decimal         @db.Decimal(10, 2)
  payment_method String
  status         payment_status? @default(pending)
  transaction_id String?
  created_at     DateTime?       @default(now()) @db.Timestamp(6)
  mock_series_id BigInt?
  courses        courses?        @relation(fields: [course_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  mock_series    mock_series?    @relation(fields: [mock_series_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  users          users?          @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model post_tags {
  post_id BigInt
  tag_id  BigInt
  posts   posts  @relation(fields: [post_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  tags    tags   @relation(fields: [tag_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@id([post_id, tag_id])
}

model post_templates {
  id          BigInt    @id @default(autoincrement())
  name        String    @unique
  description String?
  structure   String    @db.Text
  created_at  DateTime? @default(now()) @db.Timestamptz(6)
  posts       posts[]
}

model posts {
  id             BigInt          @id @default(autoincrement())
  category_id    BigInt?
  title          String
  slug           String          @unique
  content        String
  external_url   String?
  thumbnail_url  String?
  published_at   DateTime?       @db.Timestamp(6)
  created_by     BigInt?
  created_at     DateTime?       @default(now()) @db.Timestamp(6)
  updated_at     DateTime?       @default(now()) @db.Timestamp(6)
  template_id    BigInt?
  content_json   Json?
  content_html   String?
  comments       comments[]
  post_tags      post_tags[]
  categories     categories?     @relation(fields: [category_id], references: [id], onUpdate: NoAction)
  users          users?          @relation(fields: [created_by], references: [id], onUpdate: NoAction)
  post_templates post_templates? @relation(fields: [template_id], references: [id], onUpdate: NoAction)
}

model study_materials {
  id          BigInt    @id @default(autoincrement())
  title       String
  description String?
  file_url    String
  created_at  DateTime? @default(now()) @db.Timestamp(6)
}

model tags {
  id        BigInt      @id @default(autoincrement())
  name      String      @unique
  post_tags post_tags[]
}

model users {
  id             BigInt           @id @default(autoincrement())
  full_name      String
  email          String           @unique
  password_hash  String
  role           user_role?       @default(student)
  created_at     DateTime?        @default(now()) @db.Timestamp(6)
  comments       comments[]
  course_reviews course_reviews[]
  enrollments    enrollments[]
  mock_attempts  mock_attempts[]
  payments       payments[]
  posts          posts[]
}

enum enrollment_status {
  active
  expired
  cancelled
}

enum payment_status {
  pending
  success
  failed
}

enum plan_type {
  free
  one_time
  subscription
}

enum question_type {
  mcq
  true_false
  fill_blank
}

enum user_role {
  admin
  student
}
