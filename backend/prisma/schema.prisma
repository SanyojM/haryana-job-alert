generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model categories {
  id          BigInt    @id @default(autoincrement())
  name        String    @unique
  description String?
  created_at  DateTime? @default(now()) @db.Timestamp(6)
  posts       posts[]
}

model course_categories {
  id          BigInt    @id @default(autoincrement())
  name        String    @unique
  slug        String    @unique
  description String?
  created_at  DateTime? @default(now()) @db.Timestamp(6)
  courses     courses[]
}

model course_tags {
  id         BigInt    @id @default(autoincrement())
  name       String    @unique
  slug       String    @unique
  created_at DateTime? @default(now()) @db.Timestamp(6)
  course_course_tags course_course_tags[]
}

model course_course_tags {
  course_id BigInt
  tag_id    BigInt
  course    courses     @relation(fields: [course_id], references: [id], onDelete: Cascade)
  tag       course_tags @relation(fields: [tag_id], references: [id], onDelete: Cascade)

  @@id([course_id, tag_id])
}

model course_authors {
  course_id BigInt
  user_id   BigInt // Refers to the 'users' table (admins)
  course    courses @relation(fields: [course_id], references: [id], onDelete: Cascade)
  user      users   @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@id([course_id, user_id])
}

model courses {
  id                 BigInt             @id @default(autoincrement())
  title              String
  slug               String             @unique
  description        String?            @db.Text
  thumbnail_url      String?
  intro_video_url    String?            
  pricing_model      CoursePricingModel @default(free)
  regular_price      Decimal?           @db.Decimal(10, 2)
  sale_price         Decimal?           @db.Decimal(10, 2)
  category_id        BigInt?            
  total_duration_sec Int?               
  status             CourseStatus       @default(draft)
  created_at         DateTime?          @default(now()) @db.Timestamp(6)
  updated_at         DateTime?          @updatedAt @db.Timestamp(6)

  category           course_categories? @relation(fields: [category_id], references: [id], onDelete: SetNull)
  course_authors     course_authors[]
  course_course_tags course_course_tags[]
  course_topics      course_topics[]
  payments           payments[]
  enrollments        enrollments[]
}

model course_topics {
  id          BigInt           @id @default(autoincrement())
  course_id   BigInt
  title       String
  description String?          @db.Text
  order       Int
  created_at  DateTime?        @default(now()) @db.Timestamp(6)
  updated_at  DateTime?        @updatedAt @db.Timestamp(6)

  course      courses          @relation(fields: [course_id], references: [id], onDelete: Cascade)
  lessons     course_lessons[]
}

model course_lessons {
  id                 BigInt        @id @default(autoincrement())
  topic_id           BigInt
  title              String
  description        String?       @db.Text
  featured_image_url String?
  video_url          String        // YouTube embed URL
  video_duration_sec Int?          // Author manual input (in seconds)
  order              Int
  created_at         DateTime?     @default(now()) @db.Timestamp(6)
  updated_at         DateTime?     @updatedAt @db.Timestamp(6)

  topic              course_topics @relation(fields: [topic_id], references: [id], onDelete: Cascade)
}

model enrollments {
  id           BigInt             @id @default(autoincrement())
  user_id      BigInt?
  course_id    BigInt?
  status       enrollment_status? @default(active)
  started_at   DateTime?          @default(now()) @db.Timestamp(6)
  
  courses      courses?           @relation(fields: [course_id], references: [id], onUpdate: NoAction, onDelete: SetNull)
  users        users?             @relation(fields: [user_id], references: [id], onUpdate: NoAction, onDelete: SetNull)
}

model mock_attempts {
  id           BigInt      @id @default(autoincrement())
  test_id      BigInt?
  user_id      BigInt?
  answers      Json
  score        Int?
  started_at   DateTime?   @default(now()) @db.Timestamp(6)
  completed_at DateTime?   @db.Timestamp(6)
  mock_tests   mock_tests? @relation(fields: [test_id], references: [id], onUpdate: NoAction, onDelete: SetNull)
  users        users?      @relation(fields: [user_id], references: [id], onUpdate: NoAction, onDelete: SetNull)
}

model mock_categories {
  id          BigInt        @id @default(autoincrement())
  name        String        @unique
  description String?
  slug        String       @unique
  mock_series mock_series[]
}

model mock_tags {
  id               BigInt             @id @default(autoincrement())
  name             String             @unique
  mock_series_tags mock_series_tags[]
}

model mock_series_tags {
  series_id BigInt
  tag_id    BigInt
  series    mock_series @relation(fields: [series_id], references: [id], onDelete: SetNull, onUpdate: NoAction)
  tag       mock_tags   @relation(fields: [tag_id], references: [id], onDelete: SetNull, onUpdate: NoAction)

  @@id([series_id, tag_id])
}

model mock_questions {
  id             BigInt         @id @default(autoincrement())
  test_id        BigInt?
  question_text  String
  question_type  question_type? @default(mcq)
  options        Json?
  correct_answer String
  marks          Int?           @default(1)
  mock_tests     mock_tests?    @relation(fields: [test_id], references: [id], onUpdate: NoAction, onDelete: SetNull)
}

model mock_series {
  id                BigInt              @id @default(autoincrement())
  category_id       BigInt?
  title             String
  description       String?
  created_at        DateTime?           @default(now()) @db.Timestamp(6)
  price             Decimal?            @db.Decimal
  slug              String              @unique
  mock_categories   mock_categories?    @relation(fields: [category_id], references: [id], onUpdate: NoAction, onDelete: SetNull)
  mock_series_tags  mock_series_tags[]
  mock_series_tests mock_series_tests[]
  payments          payments[]
}

model mock_tests {
  id                BigInt              @id @default(autoincrement())
  title             String
  description       String?
  duration_minutes  Int
  total_marks       Int
  created_at        DateTime?           @default(now()) @db.Timestamp(6)
  is_free           Boolean?
  slug              String              @unique
  mock_attempts     mock_attempts[]
  mock_questions    mock_questions[]
  mock_series_tests mock_series_tests[]
}

model mock_series_tests {
  series_id BigInt
  test_id   BigInt
  slug      String?     @unique
  series    mock_series @relation(fields: [series_id], references: [id], onDelete: SetNull, onUpdate: NoAction)
  test      mock_tests  @relation(fields: [test_id], references: [id], onDelete: SetNull, onUpdate: NoAction)

  @@id([series_id, test_id])
}

model payments {
  id             BigInt          @id @default(autoincrement())
  user_id        BigInt?
  course_id      BigInt?
  mock_series_id BigInt?
  amount         Decimal         @db.Decimal(10, 2)
  payment_method String
  status         payment_status? @default(pending)
  transaction_id String?         @unique
  created_at     DateTime?       @default(now()) @db.Timestamp(6)

  courses        courses?        @relation(fields: [course_id], references: [id], onUpdate: NoAction, onDelete: SetNull)
  mock_series    mock_series?    @relation(fields: [mock_series_id], references: [id], onUpdate: NoAction, onDelete: SetNull)
  users          users?          @relation(fields: [user_id], references: [id], onUpdate: NoAction, onDelete: SetNull)

  @@index([user_id, mock_series_id])
  @@index([user_id, course_id])
}

model post_tags {
  post_id BigInt
  tag_id  BigInt
  posts   posts  @relation(fields: [post_id], references: [id], onDelete: SetNull, onUpdate: NoAction)
  tags    tags   @relation(fields: [tag_id], references: [id], onDelete: SetNull, onUpdate: NoAction)

  @@id([post_id, tag_id])
}

model post_templates {
  id          BigInt    @id @default(autoincrement())
  name        String    @unique
  description String?
  structure   String
  created_at  DateTime? @default(now()) @db.Timestamptz(6)
  posts       posts[]
}

model posts {
  id             BigInt          @id @default(autoincrement())
  category_id    BigInt?
  title          String
  slug           String          @unique
  content        String
  thumbnail_url  String?
  published_at   DateTime?       @db.Timestamp(6)
  created_by     BigInt?
  created_at     DateTime?       @default(now()) @db.Timestamp(6)
  updated_at     DateTime?       @default(now()) @db.Timestamp(6)
  template_id    BigInt?
  content_html   String?
  post_tags      post_tags[]

  description      String?
  meta_title       String?
  meta_description String?
  meta_keywords    String?

  categories     categories?     @relation(fields: [category_id], references: [id], onUpdate: NoAction, onDelete: SetNull)
  users          users?          @relation(fields: [created_by], references: [id], onUpdate: NoAction, onDelete: SetNull)
  post_templates post_templates? @relation(fields: [template_id], references: [id], onUpdate: NoAction, onDelete: SetNull)
}

model tags {
  id        BigInt      @id @default(autoincrement())
  name      String      @unique
  post_tags post_tags[]
}

model users {
  id              BigInt           @id @default(autoincrement())
  full_name       String
  email           String           @unique
  password_hash   String
  role            user_role?       @default(student)
  created_at      DateTime?        @default(now()) @db.Timestamp(6)
  enrollments     enrollments[]
  file_payments   file_payment[]
  mock_attempts   mock_attempts[]
  payments        payments[]
  posts           posts[]
  purchased_files purchased_file[]
  submissions     submission[]

  authored_courses course_authors[]
}

model form {
  id          String          @id @default(cuid())
  title       String
  slug        String          @unique
  description String?
  published   Boolean         @default(false)
  price       Decimal?        @db.Decimal(10, 2)
  created_at  DateTime        @default(now())
  updated_at  DateTime        @updatedAt
  fields      field[]
  payments    form_payments[]
  submissions submission[]
}

model field {
  id       String  @id @default(cuid())
  form_id  String
  key      String
  label    String
  type     String
  required Boolean @default(false)
  options  Json?
  order    Int
  meta     Json?
  form     form    @relation(fields: [form_id], references: [id])
}

model submission {
  id         String         @id @default(cuid())
  form_id    String
  data       Json
  paid       Boolean        @default(false)
  user_id    BigInt
  user_agent String?
  created_at DateTime       @default(now())
  updated_at DateTime       @updatedAt
  payment    form_payments? @relation("submission_payment_id")
  form       form           @relation(fields: [form_id], references: [id])
  user       users          @relation(fields: [user_id], references: [id])
}

model form_payments {
  id                  String      @id @default(cuid())
  form_id             String
  submission_id       String?     @unique
  provider            String      @default("razorpay")
  provider_payment_id String?     @unique
  amount              Decimal     @db.Decimal(10, 2)
  status              String
  metadata            Json?
  upi_transaction_id  String?
  created_at          DateTime    @default(now()) @db.Timestamp(6)
  form                form        @relation(fields: [form_id], references: [id])
  submission          submission? @relation("submission_payment_id", fields: [submission_id], references: [id])
}

model downloadable_file {
  id              String           @id @default(cuid())
  title           String
  slug            String           @unique
  description     String?
  file_url        String
  thumbnail_url   String?
  price           Decimal          @default(0) @db.Decimal(10, 2)
  is_published    Boolean          @default(false)
  downloads_count Int              @default(0)
  created_at      DateTime         @default(now())
  updated_at      DateTime         @updatedAt
  payments        file_payment[]
  purchases       purchased_file[]
}

model file_payment {
  id                  String            @id @default(cuid())
  file_id             String
  user_id             BigInt
  provider            String            @default("razorpay")
  razorpay_order_id   String?           @unique
  razorpay_payment_id String?           @unique
  razorpay_signature  String?
  amount              Decimal           @db.Decimal(10, 2)
  status              String            @default("pending")
  metadata            Json?
  created_at          DateTime          @default(now())
  updated_at          DateTime          @updatedAt
  file                downloadable_file @relation(fields: [file_id], references: [id], onDelete: Cascade)
  user                users             @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@index([file_id])
  @@index([user_id])
  @@index([status])
}

model purchased_file {
  id           String            @id @default(cuid())
  file_id      String
  user_id      BigInt
  purchased_at DateTime          @default(now())
  file         downloadable_file @relation(fields: [file_id], references: [id], onDelete: Cascade)
  user         users             @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@unique([file_id, user_id])
  @@index([user_id])
  @@index([file_id])
}

model carousel_texts {
  id         BigInt    @id @default(autoincrement())
  text       String
  is_active  Boolean   @default(false)
  created_at DateTime? @default(now()) @db.Timestamp(6)
}

enum enrollment_status {
  active
  expired
  cancelled
}

enum payment_status {
  pending
  success
  failed
}

enum plan_type {
  free
  one_time
  subscription
}

enum question_type {
  mcq
  true_false
  fill_blank
}

enum user_role {
  admin
  student
}

enum CoursePricingModel {
  free
  paid
}

enum CourseStatus {
  draft
  published
}