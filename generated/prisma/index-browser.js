
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('./runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.16.1
 * Query Engine version: 1c57fdcd7e44b29b9313256c76699e91c3ac3c43
 */
Prisma.prismaVersion = {
  client: "6.16.1",
  engine: "1c57fdcd7e44b29b9313256c76699e91c3ac3c43"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.Answer_keysScalarFieldEnum = {
  id: 'id',
  title: 'title',
  year: 'year',
  file_url: 'file_url',
  created_at: 'created_at'
};

exports.Prisma.CategoriesScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  created_at: 'created_at'
};

exports.Prisma.CommentsScalarFieldEnum = {
  id: 'id',
  post_id: 'post_id',
  user_id: 'user_id',
  content: 'content',
  created_at: 'created_at'
};

exports.Prisma.Course_plansScalarFieldEnum = {
  id: 'id',
  course_id: 'course_id',
  plan_type: 'plan_type',
  plan_name: 'plan_name',
  price: 'price',
  duration_days: 'duration_days',
  created_at: 'created_at'
};

exports.Prisma.Course_reviewsScalarFieldEnum = {
  id: 'id',
  course_id: 'course_id',
  user_id: 'user_id',
  rating: 'rating',
  review: 'review',
  created_at: 'created_at'
};

exports.Prisma.Course_videosScalarFieldEnum = {
  id: 'id',
  course_id: 'course_id',
  title: 'title',
  video_url: 'video_url',
  position: 'position',
  is_demo: 'is_demo',
  created_at: 'created_at'
};

exports.Prisma.CoursesScalarFieldEnum = {
  id: 'id',
  title: 'title',
  description: 'description',
  thumbnail_url: 'thumbnail_url',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.EnrollmentsScalarFieldEnum = {
  id: 'id',
  user_id: 'user_id',
  course_id: 'course_id',
  plan_id: 'plan_id',
  status: 'status',
  started_at: 'started_at',
  expires_at: 'expires_at'
};

exports.Prisma.Google_adsScalarFieldEnum = {
  id: 'id',
  placement: 'placement',
  ad_code: 'ad_code',
  created_at: 'created_at'
};

exports.Prisma.Mock_attemptsScalarFieldEnum = {
  id: 'id',
  test_id: 'test_id',
  user_id: 'user_id',
  answers: 'answers',
  score: 'score',
  started_at: 'started_at',
  completed_at: 'completed_at'
};

exports.Prisma.Mock_categoriesScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description'
};

exports.Prisma.Mock_questionsScalarFieldEnum = {
  id: 'id',
  test_id: 'test_id',
  question_text: 'question_text',
  question_type: 'question_type',
  options: 'options',
  correct_answer: 'correct_answer',
  marks: 'marks'
};

exports.Prisma.Mock_seriesScalarFieldEnum = {
  id: 'id',
  category_id: 'category_id',
  title: 'title',
  description: 'description',
  created_at: 'created_at',
  price: 'price'
};

exports.Prisma.Mock_testsScalarFieldEnum = {
  id: 'id',
  series_id: 'series_id',
  title: 'title',
  description: 'description',
  duration_minutes: 'duration_minutes',
  total_marks: 'total_marks',
  created_at: 'created_at',
  is_free: 'is_free'
};

exports.Prisma.PaymentsScalarFieldEnum = {
  id: 'id',
  user_id: 'user_id',
  course_id: 'course_id',
  amount: 'amount',
  payment_method: 'payment_method',
  status: 'status',
  transaction_id: 'transaction_id',
  created_at: 'created_at',
  mock_series_id: 'mock_series_id'
};

exports.Prisma.Post_tagsScalarFieldEnum = {
  post_id: 'post_id',
  tag_id: 'tag_id'
};

exports.Prisma.Post_templatesScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  structure: 'structure',
  created_at: 'created_at'
};

exports.Prisma.PostsScalarFieldEnum = {
  id: 'id',
  category_id: 'category_id',
  title: 'title',
  slug: 'slug',
  content: 'content',
  external_url: 'external_url',
  thumbnail_url: 'thumbnail_url',
  published_at: 'published_at',
  created_by: 'created_by',
  created_at: 'created_at',
  updated_at: 'updated_at',
  template_id: 'template_id',
  content_json: 'content_json',
  content_html: 'content_html'
};

exports.Prisma.Study_materialsScalarFieldEnum = {
  id: 'id',
  title: 'title',
  description: 'description',
  file_url: 'file_url',
  created_at: 'created_at'
};

exports.Prisma.TagsScalarFieldEnum = {
  id: 'id',
  name: 'name'
};

exports.Prisma.UsersScalarFieldEnum = {
  id: 'id',
  full_name: 'full_name',
  email: 'email',
  password_hash: 'password_hash',
  role: 'role',
  created_at: 'created_at'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.JsonNullValueInput = {
  JsonNull: Prisma.JsonNull
};

exports.Prisma.NullableJsonNullValueInput = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};
exports.plan_type = exports.$Enums.plan_type = {
  free: 'free',
  one_time: 'one_time',
  subscription: 'subscription'
};

exports.enrollment_status = exports.$Enums.enrollment_status = {
  active: 'active',
  expired: 'expired',
  cancelled: 'cancelled'
};

exports.question_type = exports.$Enums.question_type = {
  mcq: 'mcq',
  true_false: 'true_false',
  fill_blank: 'fill_blank'
};

exports.payment_status = exports.$Enums.payment_status = {
  pending: 'pending',
  success: 'success',
  failed: 'failed'
};

exports.user_role = exports.$Enums.user_role = {
  admin: 'admin',
  student: 'student'
};

exports.Prisma.ModelName = {
  answer_keys: 'answer_keys',
  categories: 'categories',
  comments: 'comments',
  course_plans: 'course_plans',
  course_reviews: 'course_reviews',
  course_videos: 'course_videos',
  courses: 'courses',
  enrollments: 'enrollments',
  google_ads: 'google_ads',
  mock_attempts: 'mock_attempts',
  mock_categories: 'mock_categories',
  mock_questions: 'mock_questions',
  mock_series: 'mock_series',
  mock_tests: 'mock_tests',
  payments: 'payments',
  post_tags: 'post_tags',
  post_templates: 'post_templates',
  posts: 'posts',
  study_materials: 'study_materials',
  tags: 'tags',
  users: 'users'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
